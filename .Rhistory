add = TRUE)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE, col = NA,
scale = T,coltitle = "black",
south = F,north = T)
cols <- carto.pal(pal1 = "green.pal", n1 = 2, pal2 = "red.pal",n2 = 4)
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2,
add = TRUE)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE, col = NA,
scale = T,coltitle = "black",
south = F,north = T)
cols <- carto.pal(pal1 = "green.pal", n1 = 5, pal2 = "red.pal",n2 = 5)
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2,
add = TRUE)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE, col = NA,
scale = T,coltitle = "black",
south = F,north = T)
cols <- carto.pal(pal1 = "green.pal", n1 = 5, pal2 = "red.pal",n2 = 5)
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2,
add = TRUE)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE, col = NA,
scale = T,coltitle = "white",
south = F,north = T,bg = "black")
cols <- carto.pal(pal1 = "green.pal", n1 = 5, pal2 = "red.pal",n2 = 5)
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2,
add = TRUE)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE, col = NA,
scale = T,coltitle = "white",
south = F,north = T,col="black")
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2,
add = TRUE)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = T,coltitle = "white",
south = F,north = T,col="black")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = T,coltitle = "white",
south = F,north = T,col="black")
help(layoutLayer)
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = 100,coltitle = "white",
south = F,north = T,col="black")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = 1,coltitle = "white",
south = F,north = T,col="black")
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = 1,coltitle = "white",
south = F,north = T,col="black")
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = 1,coltitle = "white",
south = F,north = T,col="black")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = 0,coltitle = "white",
south = F,north = T,col="black")
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "left",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = 0,coltitle = "white",
south = F,north = T,col="black")
crs(dep)
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "left",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = NULL,coltitle = "white",
south = F,north = T,col="black")
dev.off()
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "left",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = NULL,coltitle = "white",
south = F,north = T,col="black")
dep <- readOGR(paste0(Sys.getenv('CS_HOME'),'/Misc/Anto/departements-20140306-100m-shp'),'departements-20140306-100m',stringsAsFactors = F)
library(rgdal)
library(cartography)
# load data
dep <- readOGR(paste0(Sys.getenv('CS_HOME'),'/Misc/Anto/departements-20140306-100m-shp'),'departements-20140306-100m',stringsAsFactors = F)
data = read.csv(file=paste0(Sys.getenv('CS_HOME'),'/Misc/Anto/cd.csv'),sep=';',stringsAsFactors = F)
data$id = ifelse(sapply(as.character(data$dept),nchar)>=2,as.character(data$dept),paste0("0",as.character(data$dept)))
# select your deps (france métropolitaine ?)
#dep = dep[sapply(dep$code_insee,nchar)==2,]
dep = dep[dep$code_insee%in%data$id,]
# -> pas besoin de faire la jointure à la main, la primitive de carto le fait
# palette de couleur, nb de classes doit correspondre à celui dans le choroLayer
cols <- carto.pal(pal1 = "green.pal", n1 = 5, pal2 = "red.pal",n2 = 5)
png(file=paste0(Sys.getenv('CS_HOME'),'/Misc/Anto/map.png'),width = 12,height=10,units='cm')
choroLayer(spdf = dep,df = data,var = "CD_emp",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "left",
legend.title.txt = "Legend Title",legend.values.rnd = 2,legend.nodata = "No Data"
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = NULL,coltitle = "white",
south = F,north = T,col="black")
dev.off()
png(file=paste0(Sys.getenv('CS_HOME'),'/Misc/Anto/map.png'),width = 12,height=10,units='cm',res = 300)
choroLayer(spdf = dep,df = data,var = "CD_emp",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "left",
legend.title.txt = "Legend Title",legend.values.rnd = 2,legend.nodata = "No Data"
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = NULL,coltitle = "white",
south = F,north = T,col="black")
dev.off()
png(file=paste0(Sys.getenv('CS_HOME'),'/Misc/Anto/map.png'),width = 12,height=10,units='cm',res = 300)
par(mar=c(1.0,1.0,1.0,1.0))
choroLayer(spdf = dep,df = data,var = "CD_emp",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "left",
legend.title.txt = "Legend Title",legend.values.rnd = 2,legend.nodata = "No Data"
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = NULL,coltitle = "white",
south = F,north = T,col="black")
dev.off()
png(file=paste0(Sys.getenv('CS_HOME'),'/Misc/Anto/map.png'),width = 13,height=10,units='cm',res = 300)
par(mar=c(1.5,1.5,1.5,1.5))
choroLayer(spdf = dep,df = data,var = "CD_emp",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "left",
legend.title.txt = "Legend Title",legend.values.rnd = 2,legend.nodata = "No Data"
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = NULL,coltitle = "white",
south = F,north = T,col="black")
dev.off()
installed.packages()
head(installed.packages())
installed.packages[c("cartography","rgdal"),c("Version")]
installed.packages[c("cartography","rgdal"),]
installed.packages()[c("cartography","rgdal"),c("Version")]
measures
library(igraph)
setwd(paste0(Sys.getenv('MONITORAT'),'/L2AnalyseSpatiale/Partiel/NetworkResilience'))
source('functions.R')
n = 100
# real road network ; optimized network ?
networktypes = c("lattice","pa-age","random","tree","real")
realnetworks = c("idf","lacourtine","londonM25","lyon","paris","randstad")
indicators = c("stats","gamma","betweenness","diameter","closeness","transitivity","efficiency","modularity")
measures = c(gamma,normalizedBetweenness,shortestPathMeasures,clustCoef,louvainModularity)
getwd()
library(igraph)
library(dplyr)
setwd(paste0(Sys.getenv('MONITORAT'),'/L2AnalyseSpatiale/Partiel/NetworkResilience'))
source('functions.R')
n = 1000
# real road network ; optimized network ?
networktypes = c("lattice","pa-age","random","tree","real")
realnetworks = c("idf","lacourtine","londonM25","lyon","paris","randstad")
indicators = c("stats","gamma","betweenness","diameter","closeness","transitivity","efficiency","modularity")
measures = c(gamma,normalizedBetweenness,shortestPathMeasures,clustCoef,louvainModularity)
library(igraph)
library(dplyr)
setwd(paste0(Sys.getenv('MONITORAT'),'/L2AnalyseSpatiale/Partiel/NetworkResilience'))
source('functions.R')
n = 1000
# real road network ; optimized network ?
networktypes = c("lattice","pa-age","random","tree","real")
realnetworks = c("idf","lacourtine","londonM25","lyon","paris","randstad")
indicators = c("stats","gamma","betweenness","diameter","closeness","transitivity","efficiency","modularity")
measures = c(gamma,normalizedBetweenness,shortestPathMeasures,clustCoef,louvainModularity)
setwd('/Users/Juste/Documents/Monitorat/L2AnalyseSpatiale/Partiel/NetworkResilience/')
source('functions.R')
n = 1000
# real road network ; optimized network ?
networktypes = c("lattice","pa-age","random","tree","real")
realnetworks = c("idf","lacourtine","londonM25","lyon","paris","randstad")
indicators = c("stats","gamma","betweenness","diameter","closeness","transitivity","efficiency","modularity")
measures = c(gamma,normalizedBetweenness,shortestPathMeasures,clustCoef,louvainModularity)
load('synthetic.RData')
synthtypes = c("lattice","pa-age","random","tree")
for(type in synthtypes){
show(type)
d=unlist(lapply(res,function(l){l[[type]]}))
d=data.frame(as.tbl(data.frame(val=d,name=names(d)))%>%group_by(name)%>%summarise(val=mean(val)))
dd=d$val;names(dd)<-d$name
# handmade knitr, hardcore !
show(paste0("$",format(dd["vcount"],digits=2),"\\","pm ",format(dd["vcountSd"],digits=2)," $ & $",
format(dd["ecount"],digits=2)," \\pm ",format(dd["ecountSd"],digits=2)," $ & $",
format(dd["gamma"],digits=2)," \\pm ",format(dd["gammaSd"],digits=2)," $ & $",
format(dd["meanDegree"],digits=2)," \\pm ",format(dd["meanDegreeSd"],digits=2)," $ & $",
format(dd["diameter"],digits=2)," \\pm ",format(dd["diameterSd"],digits=2)," $ & $",
format(dd["meanBetweenness"],digits=2)," \\pm ",format(dd["meanBetweennessSd"],digits=2)," $ & $",
format(dd["alphaBetweenness"],digits=2)," \\pm ",format(dd["alphaBetweennessSd"],digits=2)," $ & $",
format(dd["meanCloseness"],digits=2)," \\pm ",format(dd["meanClosenessSd"],digits=2)," $ & $",
format(dd["alphaCloseness"],digits=2)," \\pm ",format(dd["alphaClosenessSd"],digits=2)," $ & $",
format(dd["efficiency"],digits=2)," \\pm ",format(dd["efficiencySd"],digits=2)," $ & $",
format(dd["transitivity"],digits=2)," \\pm ",format(dd["transitivitySd"],digits=2)," $ & $",
format(dd["modularity"],digits=2)," \\pm ",format(dd["modularitySd"],digits=2)," $ &"
)
)
}
type
dd$meanDegree
dd["meanDegree"]
dd["meanBetweenness"]
for(type in synthtypes){
show(type)
d=unlist(lapply(res,function(l){l[[type]]}))
d=data.frame(as.tbl(data.frame(val=d,name=names(d)))%>%group_by(name)%>%summarise(val=mean(val)))
dd=d$val;names(dd)<-d$name
# handmade knitr, hardcore !
show(dd["meanDegree"])
# show(paste0("$",format(dd["vcount"],digits=2),"\\","pm ",format(dd["vcountSd"],digits=2)," $ & $",
#             format(dd["ecount"],digits=2)," \\pm ",format(dd["ecountSd"],digits=2)," $ & $",
#             format(dd["gamma"],digits=2)," \\pm ",format(dd["gammaSd"],digits=2)," $ & $",
#             format(dd["meanDegree"],digits=2)," \\pm ",format(dd["meanDegreeSd"],digits=2)," $ & $",
#             format(dd["diameter"],digits=2)," \\pm ",format(dd["diameterSd"],digits=2)," $ & $",
#             format(dd["meanBetweenness"],digits=2)," \\pm ",format(dd["meanBetweennessSd"],digits=2)," $ & $",
#             format(dd["alphaBetweenness"],digits=2)," \\pm ",format(dd["alphaBetweennessSd"],digits=2)," $ & $",
#             format(dd["meanCloseness"],digits=2)," \\pm ",format(dd["meanClosenessSd"],digits=2)," $ & $",
#             format(dd["alphaCloseness"],digits=2)," \\pm ",format(dd["alphaClosenessSd"],digits=2)," $ & $",
#             format(dd["efficiency"],digits=2)," \\pm ",format(dd["efficiencySd"],digits=2)," $ & $",
#             format(dd["transitivity"],digits=2)," \\pm ",format(dd["transitivitySd"],digits=2)," $ & $",
#             format(dd["modularity"],digits=2)," \\pm ",format(dd["modularitySd"],digits=2)," $ &"
#
#             )
#      )
}
for(type in synthtypes){
show(type)
d=unlist(lapply(res,function(l){l[[type]]}))
d=data.frame(as.tbl(data.frame(val=d,name=names(d)))%>%group_by(name)%>%summarise(val=mean(val)))
dd=d$val;names(dd)<-d$name
# handmade knitr, hardcore !
show(dd["meanDegree"])
show(dd["meanDegreeSd"])
# show(paste0("$",format(dd["vcount"],digits=2),"\\","pm ",format(dd["vcountSd"],digits=2)," $ & $",
#             format(dd["ecount"],digits=2)," \\pm ",format(dd["ecountSd"],digits=2)," $ & $",
#             format(dd["gamma"],digits=2)," \\pm ",format(dd["gammaSd"],digits=2)," $ & $",
#             format(dd["meanDegree"],digits=2)," \\pm ",format(dd["meanDegreeSd"],digits=2)," $ & $",
#             format(dd["diameter"],digits=2)," \\pm ",format(dd["diameterSd"],digits=2)," $ & $",
#             format(dd["meanBetweenness"],digits=2)," \\pm ",format(dd["meanBetweennessSd"],digits=2)," $ & $",
#             format(dd["alphaBetweenness"],digits=2)," \\pm ",format(dd["alphaBetweennessSd"],digits=2)," $ & $",
#             format(dd["meanCloseness"],digits=2)," \\pm ",format(dd["meanClosenessSd"],digits=2)," $ & $",
#             format(dd["alphaCloseness"],digits=2)," \\pm ",format(dd["alphaClosenessSd"],digits=2)," $ & $",
#             format(dd["efficiency"],digits=2)," \\pm ",format(dd["efficiencySd"],digits=2)," $ & $",
#             format(dd["transitivity"],digits=2)," \\pm ",format(dd["transitivitySd"],digits=2)," $ & $",
#             format(dd["modularity"],digits=2)," \\pm ",format(dd["modularitySd"],digits=2)," $ &"
#
#             )
#      )
}
load('synthCorrelations.RData')
head(res)
for(type in synthtypes){
show(type)
d=unlist(lapply(res,function(l){l[[type]]}))
show(d)
}
for(type in synthtypes){
show(type)
d=unlist(lapply(res,function(l){l[[type]]}))
d=data.frame(as.tbl(data.frame(val=d,name=names(d)))%>%group_by(name)%>%summarise(val=mean(val)))
dd=d$val;names(dd)<-d$name
show(names(dd))
}
measures = c("vcount","ecount","gamma","mu","alpha","meanBetweenness")
for(type in synthtypes){
show(type)
d=unlist(lapply(res,function(l){l[[type]]}))
d=data.frame(as.tbl(data.frame(val=d,name=names(d)))%>%group_by(name)%>%summarise(val=mean(val)))
dd=d$val;names(dd)<-d$name
for(measure in measures){
show(paste0(measure, " : ",format(dd[paste0(measure,".cor")],digits=2),' [',format(dd[paste0(measure,"_inf")],digits=2),',',format(dd[paste0(measure,"_sup")],digits=2),']' ))
}
}
measures = c("vcount","ecount","gamma","mu","alpha","meanDegree","meanBetweenness")
for(type in synthtypes){
show(type)
d=unlist(lapply(res,function(l){l[[type]]}))
d=data.frame(as.tbl(data.frame(val=d,name=names(d)))%>%group_by(name)%>%summarise(val=mean(val)))
dd=d$val;names(dd)<-d$name
for(measure in measures){
show(paste0(measure, " : ",format(dd[paste0(measure,".cor")],digits=2),' [',format(dd[paste0(measure,"_inf")],digits=2),',',format(dd[paste0(measure,"_sup")],digits=2),']' ))
}
}
dd
for(type in synthtypes){
show(type)
d=unlist(lapply(res,function(l){l[[type]]}))
d=data.frame(as.tbl(data.frame(val=d,name=names(d)))%>%group_by(name)%>%summarise(val=mean(val)))
dd=d$val;names(dd)<-d$name
for(measure in measures){
show(paste0(measure, " : ",format(dd[paste0(measure,".cor")],digits=2),' [',format(dd[paste0(measure,"_inf")],digits=2),',',format(dd[paste0(measure,"_sup")],digits=2),']' ))
}
}
load('real-nocutoff.RData')
res
length(res)
measures = c("vcount","ecount","gamma","mu","alpha","meanDegree","meanBetweenness")
for(i in 1:length(realnetworks)){
d=res[[i]][[realnetworks[i]]]
for(measure in measures){
show(paste0(measure, " : ",d[measure]))
}
}
for(i in 1:length(realnetworks)){
show(realnetworks[i])
d=res[[i]][[realnetworks[i]]]
for(measure in measures){
show(paste0(measure, " : ",d[measure]))
}
}
for(i in 1:length(realnetworks)){
show(realnetworks[i])
d=res[[i]][[realnetworks[i]]]
for(measure in measures){
show(paste0(measure, " : ",format(d[measure],digits=2)))
}
}
for(i in 1:length(realnetworks)){
show(realnetworks[i])
d=res[[i]][[realnetworks[i]]]
for(measure in measures){
show(paste0(measure, " : ",format(d[measure],digits=3)))
}
}
for(i in 1:length(realnetworks)){
show(realnetworks[i])
d=res[[i]][[realnetworks[i]]]
for(measure in measures){
show(paste0(measure, " : ",format(d[measure],digits=2)))
}
}
for(type in synthtypes){
show(type)
d=unlist(lapply(res,function(l){l[[type]]}))
d=data.frame(as.tbl(data.frame(val=d,name=names(d)))%>%group_by(name)%>%summarise(val=mean(val)))
dd=d$val;names(dd)<-d$name
# handmade knitr, hardcore !
show(dd["meanDegree"])
show(dd["meanDegreeSd"])
# show(paste0("$",format(dd["vcount"],digits=2),"\\","pm ",format(dd["vcountSd"],digits=2)," $ & $",
#             format(dd["ecount"],digits=2)," \\pm ",format(dd["ecountSd"],digits=2)," $ & $",
#             format(dd["gamma"],digits=2)," \\pm ",format(dd["gammaSd"],digits=2)," $ & $",
#             format(dd["meanDegree"],digits=2)," \\pm ",format(dd["meanDegreeSd"],digits=2)," $ & $",
#             format(dd["diameter"],digits=2)," \\pm ",format(dd["diameterSd"],digits=2)," $ & $",
#             format(dd["meanBetweenness"],digits=2)," \\pm ",format(dd["meanBetweennessSd"],digits=2)," $ & $",
#             format(dd["alphaBetweenness"],digits=2)," \\pm ",format(dd["alphaBetweennessSd"],digits=2)," $ & $",
#             format(dd["meanCloseness"],digits=2)," \\pm ",format(dd["meanClosenessSd"],digits=2)," $ & $",
#             format(dd["alphaCloseness"],digits=2)," \\pm ",format(dd["alphaClosenessSd"],digits=2)," $ & $",
#             format(dd["efficiency"],digits=2)," \\pm ",format(dd["efficiencySd"],digits=2)," $ & $",
#             format(dd["transitivity"],digits=2)," \\pm ",format(dd["transitivitySd"],digits=2)," $ & $",
#             format(dd["modularity"],digits=2)," \\pm ",format(dd["modularitySd"],digits=2)," $ &"
#
#             )
#      )
}
load('synthetic.RData')
synthtypes = c("lattice","pa-age","random","tree")
for(type in synthtypes){
show(type)
d=unlist(lapply(res,function(l){l[[type]]}))
d=data.frame(as.tbl(data.frame(val=d,name=names(d)))%>%group_by(name)%>%summarise(val=mean(val)))
dd=d$val;names(dd)<-d$name
# handmade knitr, hardcore !
show(dd["meanDegree"])
show(dd["meanDegreeSd"])
# show(paste0("$",format(dd["vcount"],digits=2),"\\","pm ",format(dd["vcountSd"],digits=2)," $ & $",
#             format(dd["ecount"],digits=2)," \\pm ",format(dd["ecountSd"],digits=2)," $ & $",
#             format(dd["gamma"],digits=2)," \\pm ",format(dd["gammaSd"],digits=2)," $ & $",
#             format(dd["meanDegree"],digits=2)," \\pm ",format(dd["meanDegreeSd"],digits=2)," $ & $",
#             format(dd["diameter"],digits=2)," \\pm ",format(dd["diameterSd"],digits=2)," $ & $",
#             format(dd["meanBetweenness"],digits=2)," \\pm ",format(dd["meanBetweennessSd"],digits=2)," $ & $",
#             format(dd["alphaBetweenness"],digits=2)," \\pm ",format(dd["alphaBetweennessSd"],digits=2)," $ & $",
#             format(dd["meanCloseness"],digits=2)," \\pm ",format(dd["meanClosenessSd"],digits=2)," $ & $",
#             format(dd["alphaCloseness"],digits=2)," \\pm ",format(dd["alphaClosenessSd"],digits=2)," $ & $",
#             format(dd["efficiency"],digits=2)," \\pm ",format(dd["efficiencySd"],digits=2)," $ & $",
#             format(dd["transitivity"],digits=2)," \\pm ",format(dd["transitivitySd"],digits=2)," $ & $",
#             format(dd["modularity"],digits=2)," \\pm ",format(dd["modularitySd"],digits=2)," $ &"
#
#             )
#      )
}
load('realCorrelations.RData')
realnetworks = c("idf","lacourtine","londonM25","lyon","paris","randstad")
measures = c("vcount","ecount","gamma","mu","alpha","meanDegree","meanBetweenness")
for(i in 1:length(realnetworks)){
show(realnetworks[i])
d=res[[i]][[realnetworks[i]]]
for(measure in measures){
show(paste0(measure, " : ",format(d[measure],digits=2)))
}
}
load('real-nocutoff.RData')
realnetworks = c("idf","lacourtine","londonM25","lyon","paris","randstad")
measures = c("vcount","ecount","gamma","mu","alpha","meanDegree","meanBetweenness")
for(i in 1:length(realnetworks)){
show(realnetworks[i])
d=res[[i]][[realnetworks[i]]]
for(measure in measures){
show(paste0(measure, " : ",format(d[measure],digits=2)))
}
}
24*100*5
24*100*10
24*100*10*2
length(seq(from=0.05,to=0.5,by=0.05))
24*100*10*2 + 240
